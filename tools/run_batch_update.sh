#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEFAULT_DIRECTORY="$(pwd)"

show_help() {
    cat << EOF
Usage: run_batch_update.sh [DIRECTORY]

Execute SQL batch update files generated by generate_batch_update.py

ARGUMENTS:
    DIRECTORY    Optional directory to scan for batch update files
                 (default: current working directory)

DESCRIPTION:
    Scans for files matching 'batch_update_*.sql' pattern and executes them
    in chronological order using psql. Successfully processed files are moved
    to a 'processed/' subdirectory.

ENVIRONMENT VARIABLES:
    Database connection can be specified using either:
    
    Option 1 - Individual variables:
        PGHOST       PostgreSQL host (default: localhost)
        PGPORT       PostgreSQL port (default: 5432) 
        PGDATABASE   PostgreSQL database name (required)
        PGUSER       PostgreSQL username (required)
        PGPASSWORD   PostgreSQL password (required)
    
    Option 2 - Connection string:
        DATABASE_URL PostgreSQL connection URL
                     Format: postgresql://user:pass@host:port/dbname

EXAMPLES:
    run_batch_update.sh
    run_batch_update.sh /path/to/batch/files
    
    # With environment variables
    PGDATABASE=mydb PGUSER=user PGPASSWORD=pass run_batch_update.sh
    
    # With DATABASE_URL
    DATABASE_URL=postgresql://user:pass@localhost:5432/mydb run_batch_update.sh

EOF
}

parse_arguments() {
    local directory="$DEFAULT_DIRECTORY"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                echo "Error: Unknown option $1" >&2
                echo "Use -h or --help for usage information" >&2
                exit 1
                ;;
            *)
                directory="$1"
                break
                ;;
        esac
        shift
    done
    
    if [[ ! -d "$directory" ]]; then
        echo "Error: Directory does not exist: $directory" >&2
        exit 1
    fi
    
    echo "$directory"
}

main() {
    local scan_directory
    scan_directory=$(parse_arguments "$@")
    
    echo "Batch SQL Executor - Scanning directory: $scan_directory"
    echo "Script will execute SQL files matching pattern: batch_update_*.sql"
    echo
    
    # TODO: Implement SQL file discovery and execution
    echo "Implementation in progress..."
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi